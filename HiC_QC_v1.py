"""
 Takes a set of files generated by the pipeline and performs QC on them. Requires the
 automatically-generated names produced by my scripts. As long as all of these scripts
 are in the folder, this script will work:
 
 
 Returns:
 		○ Total reads
		○ # containing scars
		○ # mapped uniquely
		○ # unmapped
		○ # paired
		○ # collapsed (duplicate)
		○ Distance file
		○ Binned distances (10kb)
		○ Left/right/inner/outer
 
"""

from optparse import OptionParser
import sys
import re
import subprocess
from subprocess import call

def parse_options():
	parser = OptionParser()
	parser.add_option("-f", "--file", dest="filename",
					  help="fastq file, initial", metavar="FILE")
	(options, args) = parser.parse_args()
	return options

options = parse_options()
init_fastq_file = options.filename

m = re.search('.fastq', init_fastq_file)
file_stem = init_fastq_file[0 : m.start()] + '_'

total_reads = 0
scar_reads = 0
unique_reads = 0
unmapped_reads = 0
multiplyMapped_reads = 0


# First, get total reads. Turn out to be FUCKING COMPLICATED BECAUSE PYTHON SUCKS
if (re.search('.gz', init_fastq_file)):
	ps = subprocess.Popen(('gzip', '-dc', init_fastq_file), stdout=subprocess.PIPE) #create ps object that has a pipe as its stdout
	output = str(subprocess.check_output(['wc', '-l'], stdin=ps.stdout)) #use stdout from above as input, need to capture as string because otherwise returns output object (of course) which sucks
	output = output[:-3] #(takes off \n' at the end)
	total_reads = int(output.split()[1]) / 4 #fastq file 4 lines per read
else:
	output = str(subprocess.check_output(['wc', '-l', init_fastq_file]))
	total_reads = int(output.split()[1]) // 4
print('Total\t' + str(total_reads))	

# Next, get reads containing scars
'''
scar_file = file_stem + 'outscar.fastq'
scar_file_output = str(subprocess.check_output(['wc', '-l', scar_file]))
scar_reads = int(scar_file_output.split()[1])
'''

unique_file = file_stem + 'mappingV1_0_unique.bowtie'
unique_file_output = str(subprocess.check_output(['wc', '-l', unique_file]))
unique_reads = int(unique_file_output.split()[1])
print('Unique\t' + str(unique_reads))

unmapped_file = file_stem + 'mappingV1_0_unmapped.fastq'
unmapped_file_output = str(subprocess.check_output(['wc', '-l', unmapped_file]))
unmapped_reads = int(unmapped_file_output.split()[1]) // 4
print('Unmapped\t' + str(unmapped_reads))
